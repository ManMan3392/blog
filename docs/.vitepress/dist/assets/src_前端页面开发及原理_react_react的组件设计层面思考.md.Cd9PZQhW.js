import{_ as a,c as i,o as t,ae as e}from"./chunks/framework.Cd-3tpCq.js";const c=JSON.parse('{"title":"react的组件设计层面思考","description":"","frontmatter":{},"headers":[],"relativePath":"src/前端页面开发及原理/react/react的组件设计层面思考.md","filePath":"src/前端页面开发及原理/react/react的组件设计层面思考.md"}'),n={name:"src/前端页面开发及原理/react/react的组件设计层面思考.md"};function l(h,s,k,p,r,d){return t(),i("div",null,s[0]||(s[0]=[e(`<h1 id="react的组件设计层面思考" tabindex="-1">react的组件设计层面思考 <a class="header-anchor" href="#react的组件设计层面思考" aria-label="Permalink to &quot;react的组件设计层面思考&quot;">​</a></h1><h2 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h2><ol><li>使用 React.memo 进行组件记忆化。</li><li>使用性能优化函数： useMemo useCallback</li></ol><h2 id="结构优化" tabindex="-1">结构优化 <a class="header-anchor" href="#结构优化" aria-label="Permalink to &quot;结构优化&quot;">​</a></h2><ol><li>单一职责原则： 一个组件只处理一类事情（UI、逻辑、状态），可读性强、复用性好。</li><li>使用自定义 Hook 抽离可复用逻辑：</li></ol><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useUserData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">userId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    fetchData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(userId).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(setData);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, [userId]);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,6)]))}const o=a(n,[["render",l]]);export{c as __pageData,o as default};
