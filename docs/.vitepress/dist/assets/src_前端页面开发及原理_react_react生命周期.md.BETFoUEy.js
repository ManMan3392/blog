import{_ as a,c as i,o as t,ae as e}from"./chunks/framework.Cd-3tpCq.js";const d=JSON.parse('{"title":"react生命周期","description":"","frontmatter":{},"headers":[],"relativePath":"src/前端页面开发及原理/react/react生命周期.md","filePath":"src/前端页面开发及原理/react/react生命周期.md"}'),n={name:"src/前端页面开发及原理/react/react生命周期.md"};function l(h,s,p,o,k,r){return t(),i("div",null,s[0]||(s[0]=[e(`<h1 id="react生命周期" tabindex="-1">react生命周期 <a class="header-anchor" href="#react生命周期" aria-label="Permalink to &quot;react生命周期&quot;">​</a></h1><p>React 的生命周期是指组件从创建到销毁的整个过程中的各个阶段。</p><h2 id="hooks-实现" tabindex="-1">Hooks 实现 <a class="header-anchor" href="#hooks-实现" aria-label="Permalink to &quot;Hooks 实现&quot;">​</a></h2><p><strong>useEffect</strong>或者<strong>useLayoutEffect</strong> useEffect只在被挂载时或者依赖项number更新时才调用。</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">useEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;组件挂载&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;组件卸载时需要完成的操作&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, [number]);</span></span></code></pre></div><h3 id="useeffect的区别uselayouteffect" tabindex="-1">useEffect的区别useLayoutEffect： <a class="header-anchor" href="#useeffect的区别uselayouteffect" aria-label="Permalink to &quot;useEffect的区别useLayoutEffect：&quot;">​</a></h3><p>**useLayoutEffect **会在浏览器绘制页面之前执行，可以同步读取布局信息或修改 DOM。 <strong>useEffect</strong>是异步的，会在页面已经“画出来”之后（既浏览器已绘制完页面）才执行，不会阻塞用户看到页面。</p><h4 id="使用场景" tabindex="-1">使用场景： <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景：&quot;">​</a></h4><p><strong>useEffect</strong>：</p><ol><li>网络请求 2.订阅/解绑</li><li>页面标题更改、事件监听</li><li>延时操作（setTimeout/setInterval） <strong>useLayoutEffect</strong>：</li><li>读取 DOM 布局信息（如 getBoundingClientRect()）</li><li>防止闪烁、抖动的 UI 修改（例如：文字在加载后，根据宽度调整缩放比例，如果用 useEffect，用户会先看到默认样式再看到缩放效果（出现闪烁）；而 useLayoutEffect 可以在渲染前修改样式，防止闪烁。）</li></ol><h3 id="生命周期演变" tabindex="-1">生命周期演变 <a class="header-anchor" href="#生命周期演变" aria-label="Permalink to &quot;生命周期演变&quot;">​</a></h3><p>在类组件中，生命周期分为三个阶段：</p><ol><li>挂载</li></ol><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()         </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 构造函数，初始化状态</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">componentDidMount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// DOM 已挂载，适合发送网络请求</span></span></code></pre></div><ol start="2"><li>更新</li></ol><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shouldComponentUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 控制是否更新组件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">componentDidUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// DOM 更新后调用</span></span></code></pre></div><ol start="3"><li>卸载</li></ol><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">componentWillUnmount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 组件卸载前调用，适合清理副作用</span></span></code></pre></div><p>在react16.8后，Hooks 正式发布，函数组件也能拥有生命周期能力，成为主流做法</p>`,19)]))}const E=a(n,[["render",l]]);export{d as __pageData,E as default};
