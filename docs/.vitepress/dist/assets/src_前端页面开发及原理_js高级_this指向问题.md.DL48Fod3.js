import{_ as t,c as i,o as s,ae as l}from"./chunks/framework.DaakH-K9.js";const e="/blog/assets/image-1.CGyoNydY.png",o="/blog/assets/image-2.D0VDN9ug.png",n="/blog/assets/image-3.xs7RWP4v.png",r="/blog/assets/image-4.DNHfg1kU.png",h="/blog/assets/image-5.Dnv4s8-x.png",p="/blog/assets/image-6.DZXUr-aV.png",c="/blog/assets/image-7.CwISFTct.png",x=JSON.parse('{"title":"this指向问题","description":"","frontmatter":{},"headers":[],"relativePath":"src/前端页面开发及原理/js高级/this指向问题.md","filePath":"src/前端页面开发及原理/js高级/this指向问题.md"}'),d={name:"src/前端页面开发及原理/js高级/this指向问题.md"};function g(b,a,m,u,_,f){return s(),i("div",null,a[0]||(a[0]=[l('<h1 id="this指向问题" tabindex="-1">this指向问题 <a class="header-anchor" href="#this指向问题" aria-label="Permalink to &quot;this指向问题&quot;">​</a></h1><h2 id="this绑定方式" tabindex="-1">this绑定方式 <a class="header-anchor" href="#this绑定方式" aria-label="Permalink to &quot;this绑定方式&quot;">​</a></h2><p>this绑定只与函数<strong>调用位置</strong>有关。</p><h3 id="默认绑定" tabindex="-1">默认绑定 <a class="header-anchor" href="#默认绑定" aria-label="Permalink to &quot;默认绑定&quot;">​</a></h3><p>独立的函数调用我们可以理解成函数没有被绑定到某个对象上进行调用，严格模式下为undefined，非严格模式下指向全局对象（浏览器中是window，Node.js 中是global）</p><h3 id="隐式绑定" tabindex="-1">隐式绑定 <a class="header-anchor" href="#隐式绑定" aria-label="Permalink to &quot;隐式绑定&quot;">​</a></h3><p>它的调用位置中，是通过某个对象发起的函数调用。this指向发起函数调用的对象。注意：<strong>(person.sayName) 其实就是 “取 person 的 sayName 方法”，和直接写 person.sayName 本质一样 。</strong></p><h3 id="显示绑定" tabindex="-1">显示绑定 <a class="header-anchor" href="#显示绑定" aria-label="Permalink to &quot;显示绑定&quot;">​</a></h3><p>使用call和apply方法，第一个参数是相同的，要求传入一个对象，在调用这个函数时，会将this绑定到这个传入的对象上，后面的参数，apply为数组，call为参数列表</p><h4 id="call-apply-bind三者的区别" tabindex="-1">call,apply,bind三者的区别 <a class="header-anchor" href="#call-apply-bind三者的区别" aria-label="Permalink to &quot;call,apply,bind三者的区别&quot;">​</a></h4><p>call与apply二者的主要区别就在于传入的参数不同，她们都是在函数调用时使用的，只是此次调用绑定。但bind不同，他会创建一个新的绑定函数（bound function，BF），绑定函数是一个 exotic function object（怪异函数对象，ECMAScript 2015 中的术语），在 bind() 被调用时，这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。使用一个变量接收这个新函数，通过这个变量调用的每一次函数都会绑定该对象。</p><h3 id="new绑定" tabindex="-1">new绑定 <a class="header-anchor" href="#new绑定" aria-label="Permalink to &quot;new绑定&quot;">​</a></h3><p>函数可以当做一个类的构造函数来使用，也就是使用new关键字。 使用new关键字来调用函数是，会执行如下的操作：</p><ol><li>创建一个全新的对象；</li><li>这个新对象会被执行prototype连接；</li><li>这个新对象会绑定到函数调用的this上（this的绑定在这个步骤完成）；</li><li>如果函数没有返回其他对象，表达式会返回这个新对象；</li></ol><h2 id="规则优先级" tabindex="-1">规则优先级 <a class="header-anchor" href="#规则优先级" aria-label="Permalink to &quot;规则优先级&quot;">​</a></h2><ol><li>默认规则的优先级最低</li><li>显示绑定优先级高于隐式绑定</li><li>new绑定优先级高于隐式绑定</li><li>new绑定优先级高于bind,new绑定和call、apply是不允许同时使用的，所以不存在谁的优先级更高。</li></ol><h2 id="特殊情况" tabindex="-1">特殊情况 <a class="header-anchor" href="#特殊情况" aria-label="Permalink to &quot;特殊情况&quot;">​</a></h2><ol><li>如果在显示绑定中，我们传入一个null或者undefined，那么这个显示绑定会被忽略，使用默认规则。</li><li>创建一个函数的 间接引用，这种情况使用默认绑定规则。赋值(obj2.foo = obj1.foo)的结果是foo函数。<div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj2.goo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj1.foo)()</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//等价于foo(),结果为严格模式undefined,非严格模式window或global。</span></span></code></pre></div></li><li>箭头函数 箭头函数不会绑定this、arguments属性，也不能作为构造函数来使用。this引用就会从上层作用域（类不是一个作用域）中找到对应的this。注意：<strong>this 由定义时的上层作用域决定，和调用方式无关，也无法通过 call/apply/bind 改变。</strong></li></ol><h2 id="this面试题" tabindex="-1">this面试题 <a class="header-anchor" href="#this面试题" aria-label="Permalink to &quot;this面试题&quot;">​</a></h2><ol><li><p><strong>第一题</strong><img src="'+e+'" alt="alt text"></p></li><li><p><strong>第二题</strong><img src="'+o+'" alt="alt text"> <img src="'+n+'" alt="alt text"></p></li><li><p><strong>第三题</strong><img src="'+r+'" alt="alt text"> <img src="'+h+'" alt="alt text"></p></li><li><p><strong>第五题</strong><img src="'+p+'" alt="alt text"> <img src="'+c+'" alt="alt text"></p></li></ol>',20)]))}const y=t(d,[["render",g]]);export{x as __pageData,y as default};
