import{_ as a,c as t,o as r,ae as l}from"./chunks/framework.Cd-3tpCq.js";const u=JSON.parse('{"title":"react中类组件被函数式组件取代的原因","description":"","frontmatter":{},"headers":[],"relativePath":"src/前端页面开发及原理/react/react中类组件被函数式编程取代的原因.md","filePath":"src/前端页面开发及原理/react/react中类组件被函数式编程取代的原因.md"}'),c={name:"src/前端页面开发及原理/react/react中类组件被函数式编程取代的原因.md"};function s(_,e,i,o,n,d){return r(),t("div",null,e[0]||(e[0]=[l('<h1 id="react中类组件被函数式组件取代的原因" tabindex="-1">react中类组件被函数式组件取代的原因 <a class="header-anchor" href="#react中类组件被函数式组件取代的原因" aria-label="Permalink to &quot;react中类组件被函数式组件取代的原因&quot;">​</a></h1><p>上文（react中的class组件vs函数式组件）分析了react中函数式组件和类组件各自的优势，但很明显Hook的出现极大的补充了函数式组件的缺陷，导致函数式组件优势大于类组件优势，除此之外：</p><ol><li>函数式组件更好地适应函数式编程理念： React 本身就是一种 UI = f(state) 的思想，本质上就是声明式编程。而函数组件天然符合这种模式。而且React 的未来方向（如并发渲染、时间分片）更依赖 Hooks 机制： <ul><li>useTransition：标记非紧急更新，允许浏览器中断渲染。</li><li>useDeferredValue：延迟计算非关键值，提高响应性。</li><li>useId：生成稳定的跨渲染 ID，支持服务端渲染。</li></ul></li><li>生态与工具的倾斜 <ul><li>TypeScript 集成更友好：函数式组件的类型定义更简洁直观，避免了 Class 组件中 this 和生命周期方法的复杂类型。</li><li>测试难度降低：纯函数组件更容易进行单元测试，无需模拟复杂的 Class 实例。</li></ul></li></ol>',3)]))}const f=a(c,[["render",s]]);export{u as __pageData,f as default};
